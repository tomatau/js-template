<?xml version="1.0"?>
<project name="Tomatao Build" default="build" basedir="../">
  <!--
    create publish folder

    Minify JS /js/app/*, /js/script.js, /js/libs

    Do not concat JS, minifier does this in php

    Optimise images
    
    Minify html templates

    Just leave the zend layout and view templates alone
  -->

    <!-- load property files -->
    <property file="build/config/default.properties"/>
    <property file="build/config/project.properties"/>

    <!-- the .jar file is located in the tools directory -->
    <taskdef resource="net/sf/antcontrib/antlib.xml">
        <classpath>
            <pathelement location="${basedir}/${dir.build.tools}/ant-contrib-1.0b3.jar"/>
        </classpath>
    </taskdef>


    <!-- merge the page properties -->
    <var name="page-files" value="${file.pages}, ${file.pages.default.include}" />

  <!-- 


    Default Task 


  -->
  <!-- Build the whole System -->
  <target name="build">
    <echo message="Building New System" />
    <antcall target="-clear" />
    <antcall target="-imagespng" />
    <antcall target="-imagesjpg" />
      <!-- <antcall target="-mkdirs" /> -->
    <antcall target="-js.all.minify" />
    <antcall target="-yuicompress" />
    <antcall target="-htmlclean" />
    <antcall target="-copy" />
  </target>
  <!-- 

    / End Default Task 

  -->

  <!-- 
    Delete Any Existing Publish Folder 
  -->
  <target name="-clear">
    <echo message="Deleting existing publish directory" />
    <delete dir="${dir.source}/${dir.publish}/" />
  </target>

  <!-- 
    Create publish directory 
  -->
  <target name="-mkdirs">
    <!-- sets the publish exists property if something -->
    <condition property="publish.exists">
      <available file="${dir.publish}" type="dir" />
    </condition>
    <!-- check if the publish directory is dangerous -->
    <if>
      <or>
        <equals arg1="${dir.publish}" arg2="." />
        <equals arg1="${dir.publish}" arg2="./" />
        <equals arg1="${dir.publish}" arg2="/" />
        <equals arg1="${dir.publish}" arg2="./" />
        <equals arg1="${dir.publish}" arg2="../" />
      </or>
      <then>
        <fail message="Your dir.publish is set to ${dir.publish} which is dangerous!" />
      </then>
      <else>
        <!-- make the publish dir and copy into -->
        <if>
          <equals arg1="${publish.exists}" arg2="true" />
          <then>
            <echo message="${dir.publish} already exists" />
          </then>
          <else>
            <mkdir dir="${dir.publish}" />
            <echo message="Copying all directories into publish" />
            <copy todir="./${dir.publish}" includeEmptyDirs="true">
              <dirset dir="${dir.source}/"
                excludes="${file.default.exclude}, ${file.exclude}"
                 includes="*" />
            </copy>
          </else>
        </if>
      </else>
    </if>
  </target>


  <!-- 
    Minify JS /js/app/*, /js/script.js, /js/libs
  -->
  <target name="-js.all.minify" depends="-mkdirs">
    <echo message="Minifying scripts"/>
    <!-- copy the directories accross -->
    <echo message="Copying all directories into js" />
    <copy todir="./${dir.publish}/${dir.js}/" includeEmptyDirs="true">
      <dirset dir="${dir.source}/${dir.js}/"/>
    </copy>
    <!-- copy the excluded files accross -->
    <echo message="Copying files not to be minified and already minified" />
    <copy todir="./${dir.publish}/${dir.js}">
      <fileset dir="${dir.source}/${dir.js}" 
          includes="${file.js.bypass}, **/*.min.js"></fileset>
    </copy>
    <!-- minify all the files -->
    <echo message="minifying javascript" />
    <apply executable="java" parallel="false">
      <fileset dir="${dir.source}/${dir.js}" 
          excludes="${file.js.bypass}, **/*.min.js"
          includes="**/*.js, **/*.json, ${dir.js.app}/**/*.js, ${dir.js.app}/**/**/*.js"></fileset>
      <arg line="-jar" />
      <arg path="./${dir.build.tools}/${tool.compiler}"/>
      <arg line="--js"/>
      <srcfile />
      <arg line="--compilation_level" />
      <arg value="${scripts.compilation.level}" />
      <arg line="--warning_level" />
      <arg value="${scripts.compilation.warninglevel}" />
      <arg line="--js_output_file" />
      <mapper type="glob" from="*.js"
          to="${basedir}/${dir.publish}/${dir.js}/*.js" />
      <targetfile />
    </apply>
  </target>
  
  <!-- 
    Copy all the files into the publish dir
   -->
  <target name="-copy" depends="-mkdirs">
    <echo message="Copying all files into publish directory" />
    <copy todir="./${dir.publish}" includeEmptyDirs="false">
      <fileset dir="${dir.source}/" excludes="${file.default.exclude}, ${file.exclude}">
        <exclude name="${dir.js}/**/*.js"/>
        <exclude name="${dir.css}/**/*.css"/>
        <exclude name="${dir.css}/**/*.scss"/>
      </fileset>
    </copy>
  </target>

  <!-- 
    HTML Compressor
  -->
  <target name="-htmlclean" depends="-mkdirs">
      <echo message="Run htmlcompressor on the HTML templates"/>
      <echo message=" - removing unnecessary whitespace"/>
      <echo message=" - removing html comments"/>
      <echo message=" - compressing inline style/script tag contents"/>
      <apply executable="java" parallel="false">
          <fileset dir="${dir.source}/${dir.html.clean}"/>
          <arg value="-jar"/>
          <arg path="${dir.build.tools}/${tool.htmlcompressor}"/>
          <arg line="${tool.htmlcompressor.opts} ${tool.htmlcompressor.javascript} ${tool.htmlcompressor.opts.extra}"/>
          <srcfile/>
          <arg value="-o"/>
          <mapper type="glob" from="*" to="${basedir}/${dir.publish}/${dir.html.clean}/*"/>
          <targetfile/>
      </apply>
  </target>

  <!--
    CSS Minification
  -->
  <target name="-yuicompress" depends="-mkdirs">
        <echo message="Minifying any unconcatenated css files..."/>
        <apply executable="java" parallel="false">
            <fileset dir="${dir.source}/${dir.css}/" includes="**/*.css"/>
            <arg line="-jar"/>
            <arg path="${dir.build.tools}/${tool.yuicompressor}"/>
            <srcfile/>
            <arg line="-o"/>
            <mapper type="glob" from="*.css" to="${basedir}/${dir.publish}/${dir.css}/*.css"/>
            <targetfile/>
        </apply>
  </target>

  <!--
    Images Png
  -->
  <target name="-imagespng" depends="-mkdirs">
    <echo message="Optimizing images..."/>
    <echo message="This part might take a while."/>
    <echo message=" "/>
    <echo message="First, we run optipng on the .png files..."/>
    <!-- By default set strip-meta-tags to empty -->
    <var name="strip-meta-tags" value=""/>
    <!-- By default set os.family to windows, and optipng as available and it's executable -->
    <var name="os.family" value="windows"/>
    <var name="optipng.available" value="true"/>
    <var name="optipng.executable" value="${basedir}/${dir.build.tools}/${tool.optipng}"/>
    <!-- copy the directories accross -->
    <echo message="Copying all directories into images dir" />
    <copy todir="./${dir.publish}/${dir.images}/" includeEmptyDirs="true">
      <dirset dir="${dir.source}/${dir.images}/"/>
    </copy>
    <!-- OPTIPNG -->
    <if>
      <equals arg1="${optipng.available}" arg2="true" />
      <then>
        <if>
          <!-- delete existing png images -->
          <available file="./${dir.publish}/${dir.images}/" type="dir" />
          <then>
            <delete>
              <fileset dir="./${dir.publish}/${dir.images}/">
                <include name="**/*.png, **/**/*.png, **/**/**/*.png"/>
              </fileset>
            </delete>
          </then>
        </if>
        <!-- run it -->
        <for param="image-dir">
          <path>
            <dirset dir="${dir.source}" includes="${dir.images}" />
          </path>
          <sequential>
            <property name="relative.image.dir" location="@{image-dir}" relative="yes" />
            <!-- make the images directory -->
            <if>
              <not>
                <available file="${basedir}/${dir.publish}/${relative.image.dir}" />
              </not>
              <then>
                <copy todir="${dir.publish}/${relative.image.dir}">
                  <dirset dir="${dir.source}/${relative.image.dir}" />
                </copy>
              </then>
            </if>
            <!-- go -->
            <apply executable="${optipng.executable}" dest="./${dir.publish}/${relative.image.dir}/" osfamily="${os.family}">
              <fileset dir="./${dir.source}/${relative.image.dir}/"
                  includes="**/*.png"
                  excludes="${images.bypass}, ${images.default.bypass}" />
              <arg value="-quiet" />
              <arg value="-o7" />
              <arg value="${strip-meta-tags}" />
              <arg value="-out" />
              <targetfile />
              <srcfile />
              <mapper type="identity" />
            </apply>
            <var name="relative.image.dir" unset="true" />
          </sequential>
        </for>
      </then>
      <else>
        <!-- optipng not available -->
        <echo message="Optipng is not available" />
      </else>
    </if>
    <!-- ADVPNG -->
    <echo message="running advpng on the png files" />
    <var name="os.family" value="windows" />
    <var name="advpng.available" value="true" />
    <var name="advpng.executable" value="${basedir}/${dir.build.tools}/${tool.advpng}" />
    <!-- check it's available -->
    <if>
      <equals arg1="${advpng.available}" arg2="true" />
      <then>
        <for param="image-dir">
          <path>
            <dirset dir="${dir.source}" includes="${dir.images}" />
          </path>
          <sequential>
            <property name="relative.image.dir" location="@{image-dir}" relative="yes" />
            <!-- make the images directory -->
            <if>
              <not>
                <available file="${basedir}/${dir.publish}/${relative.image.dir}" />
              </not>
              <then>
                <copy todir="${dir.publish}/${relative.image.dir}">
                  <dirset dir="${dir.source}/${relative.image.dir}" />
                </copy>
              </then>
            </if>
            <!-- go -->
            <apply executable="${advpng.executable}" dest="./${dir.publish}/${relative.image.dir}/" osfamily="${os.family}">
              <fileset dir="./${dir.publish}/${relative.image.dir}/"
                  includes="**/*.png" excludes="${images.bypass}, ${images.default.bypass}" />
              <arg line="-z"/>
              <arg line="-4"/>
              <srcfile />
              <mapper type="identity" />
            </apply>
            <var name="relative.image.dir" unset="true" />
          </sequential>
        </for>
      </then>
      <else>
        <!-- advpng not available -->
        <echo message="Advpng is not available" />
      </else>
    </if>
  </target>

  <!-- 
    Images Jpg 
  -->
  <target name="-imagesjpg" depends="-mkdirs">
    <echo message="Clean up jpgs" />
    <var name="retain-meta-tags" value="all" />
    <var name="os.family" value="windows" />
    <var name="jpegtran.available" value="true" />
    <var name="jpegtran.executable" value="${basedir}/${dir.build.tools}/jpegtran.exe" />
    <if>
      <equals arg1="${jpegtran.available}" arg2="true" />
      <then>
        <for param="image-dir">
          <path>
            <dirset dir="${dir.source}" includes="${dir.images}" />
          </path>
          <sequential>
            <property name="relative.image.dir" location="@{image-dir}"
                  basedir="${dir.source}" relative="yes" />
            <if>
              <not>
                <available file="${basedir}/${dir.publish}/${relative.image.dir}" />
              </not>
              <then>
                <copy todir="${dir.publish}/${relative.image.dir}">
                  <dirset dir="${dir.source}/${relative.image.dir}" />
                </copy>
              </then>
            </if>
            <apply executable="${jpegtran.executable}" dest="./${dir.publish}/${relative.image.dir}" osfamily="${os.family}">
              <fileset dir="${dir.source}/${relative.image.dir}" includes="**/*jpg" excludes="${images.bypass}, ${images.default.bypass}" />
              <arg value="-copy" />
              <arg value="${retain-meta-tags}" />
              <arg value="-optimize" />
              <arg value="${images.opts.progressive}" />
              <arg value="-outfile" />
              <targetfile />
              <srcfile />
              <mapper type="identity" />
            </apply>
          </sequential>
        </for>
      </then>
      <else>
        <!-- optipng not available -->
        <echo message="JpegTran is not available" />
      </else>
    </if>
  </target>

</project>